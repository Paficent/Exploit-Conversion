local Executor = identifyexecutor()
if syn then Executor = "Synapse" end
if Executor ~= "Synapse" and Executor ~= "ScriptWare" and Executor ~= "Krnl" then Executor = "Other" end

local ExecutorColor = { -- Script-Ware only supports a couple of console colors, where most other exploits copy the Synapse source code.
    ScriptWare = {
        ["black"] = "Black",
        ["red"] = "red",
        ["green"] = "green",
        ["yellow"] = "yellow",
        ["blue"] = "blue",
        ["magenta"] = "magenta",
        ["cyan"] = "cyan",
        ["white"] = "white"
    },
    Other = {
        ["black"] = "@@BLACK@@",
        ["blue"] = "@@@@BLUE@@@@",
        ["green"] = "@@GREEN@@",
        ["cyan"] = "@@CYAN@@",
        ["red"] = "@@RED@@",
        ["magenta"] = "@@MAGENTA@@",
        ["brown"] = "@@BROWN@@",
        ["light gray"] = "@@LIGHT_GRAY@@",
        ["dark gray"] = "@@DARK_GRAY@@",
        ["light blue"] = "@@LIGHT_BLUE@@",
        ["light green"] = "@@LIGHT_GREEN@@",
        ["light cyan"] = "@@LIGHT_CYAN@@",
        ["light red"] = "@@LIGHT_RED@@",
        ["light magenta"] = "@@BLACK@@",
        ["yellow"] = "@@YELLOW@@",
        ["white"] = "@@WHITE@@"
    }
}



Console = {
    Init = function()
        if Executor == "ScriptWare" then
            rconsolecreate() -- Script-Ware requires you to create a console /shrug
        end
    end,
    Clear = function()
        return rconsoleclear()
    end,
    Input = function()
        return rconsoleinput()
    end,
    Title = function(Title) -- 
        local setname = rconsolename or rconsolesettitle or function()
           return "Error: Exploit lacking a function to set the console title"
        end
        setname(Title)
    end,
    Print = function(Text, Color, Options) -- Script-Ware supports underlined and bold text in the console
        local ColorType = type(Color)
        local OptionsType = type(Options)

        if Text == nil then
            return 'Missing parameter "Text" (1)'
        end

        if ColorType ~= "nil" then
            if ColorType ~= "string" then
                return 'Parameter "Color" (2) type is not "string", type is: ' .. ColorType
            end
        end

        if OptionsType ~= "nil" then
            if OptionsType ~= "string" then
                return 'Parameter "Options" (3) type is not "string", type is: ' .. OptionsType
            end

            if string.lower(Options) ~= "underline" or string.lower(Options) ~= "bold" then
                return 'Parameter "Options" (3) is not equal to "underline" or "bold"'
            end
        end

        if Executor == "ScriptWare" then
            if Color == nil then
                if Options == nil then
                    rconsoleprint(Text)
                else
                    if string.lower(Options) == "underline" then
                        rconsoleprint(Text, "uwhite")
                    elseif string.lower(Options) == "bold" then
                        rconsoleprint(Text, "bwhite")
                    end
                end
            else
                local x = ExecutorColor.ScriptWare[string.lower(Color)]
                if x == nil then
                    return string.lower(Color) .. 'is not supported by the current executor'
                end

                if Options == nil then --ScripWare is just wonky
                    rconsoleprint(Text, x)
                else
                    if string.lower(Options) == "underline" then
                        rconsoleprint(Text, "u" .. x)
                    elseif string.lower(Options) == "bold" then
                        rconsoleprint(Text, "b" .. x)
                    end
                end
            end
        else
            local Success = pcall(function()
                if Color == nil then
                    rconsoleprint(Text)
                else
                    local x = ExecutorColor.Other[string.lower(Color)]
                    if x == nil then
                        return string.lower(Color) .. 'is not supported by the current executor'
                    end
                    rconsoleprint(x)
                    rconsoleprint(Text)
                    rconsoleprint("@@WHITE@@")
                end 
            end)
            if not Success then
                rconsoleprint(Text)
            end
        end
    end,
    Info = function(Text)
        local writeinfo = rconsoleinfo or function()
            rconsoleprint("[INFO] " .. Text)
        end
        writeinfo(Text)
    end,
    Warn = function(Text)
        local writewarning = rconsolewarn or function()
            rconsoleprint("[WARNING] " .. Text)
        end
        writewarning(Text)
    end,
    Error = function(Text)
        local writeerr = rconsoleerr or function()
            rconsoleprint("[ERROR] " .. Text)
        end
        writeerr(Text)
    end,
    Destroy = function()
        if Executor ~= "ScriptWare" then
            return 'Executor must be Script-Ware for this function to work'
        else
            rconsoledestroy()

        end
    end,
    NewLine = function(Lines)
        if Lines == nil then
            rconsoleprint("\n")
        else
            if type(Lines) ~= "number" then
                return 'Parameter "Lines" (2) type is not "number", type is: ' .. type(Lines)
            else
                for i = 1, Lines do
                    rconsoleprint("\n")
                end
            end
        end
    end
}

return Console
